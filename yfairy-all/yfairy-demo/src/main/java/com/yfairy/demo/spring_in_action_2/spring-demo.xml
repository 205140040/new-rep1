<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
     http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-4.0.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
     http://www.springframework.org/schema/cache
      http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
      http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
       http://www.springframework.org/schema/lang
      http://www.springframework.org/schema/lang/spring-lang-2.5.xsd
      ">

	<bean id="helloService" class="com.yfairy.demo.spring_in_action_2.HelloServiceImpl">
		<!--通过构造方法注入 -->
		<!-- <constructor-arg value="jiangzi"> -->
		<!-- </constructor-arg> -->
		<!-- 通过属性注入 -->
		<property name="name" value="jiangzi"></property>
	</bean>

	<!--aop示列 -->
	<bean id="helloAspect" class="com.yfairy.demo.spring_in_action_2.HelloAspect"></bean>
	<aop:config>
		<!--pointcut切点 -->
		<aop:pointcut
			expression="execution(* com.yfairy.demo.spring_in_action_2.HelloServiceImpl.sayHello(..))"
			id="pointcut" />
		<!-- aspect切面 -->
		<aop:aspect ref="helloAspect">
			<!--before通知 -->
			<aop:before method="singBefore" pointcut-ref="pointcut" />
			<aop:after-returning method="singAfter"
				pointcut-ref="pointcut" />
		</aop:aspect>
	</aop:config>

	<!-- bean生命周期类 -->
	<bean id="beanLifeCycle" class="com.yfairy.demo.spring_in_action_2.BeanLifeCycle">
		<property name="name" value="jiangzi"></property>
		<property name="sex" value="haha"></property>
	</bean>

	<!-- 注入bean -->
	<bean id="teacher" class="com.yfairy.demo.spring_in_action_2.Teacher">
		<!-- 通过属性注入 -->
		<property name="teacherNo" value="教师NO1"></property>
	</bean>
	<bean id="teacher2" class="com.yfairy.demo.spring_in_action_2.Teacher">
		<!-- 通过属性注入 -->
		<property name="teacherNo" value="教师NO2"></property>
	</bean>

	<bean id="student" class="com.yfairy.demo.spring_in_action_2.Student">
		<!-- 多个构造参数注入 -->
		<constructor-arg name="teacher" ref="teacher"></constructor-arg>
		<constructor-arg name="classNo" value="班级NO1"></constructor-arg>
	</bean>

	<bean id="student2" class="com.yfairy.demo.spring_in_action_2.Student">
		<!--注入内部bean,内部bean无法被共享，可以不设置id -->
		<property name="teacher">
			<bean class="com.yfairy.demo.spring_in_action_2.Teacher">
				<property name="teacherNo" value="内部bean教师"></property>
			</bean>
		</property>

		<property name="teachers">
			<!-- 注入list -->
			<list>
				<ref bean="teacher" />
				<ref bean="teacher2" />
				<!--注入 null -->
				<null></null>
			</list>
		</property>
		<property name="kechengSet">
			<!-- 注入set -->
			<set>
				<value>语文</value>
				<value>数学</value>
				<value>语文</value>
			</set>
		</property>
		<property name="scoreMap">
			<!-- 注入map -->
			<map>
				<entry key="语文" value="95"></entry>
				<entry key="数学" value="88"></entry>
			</map>
		</property>
		<property name="properties">
			<!-- 注入props -->
			<props>
				<prop key="p1">p1</prop>
				<prop key="p2">p2</prop>
			</props>
		</property>
	</bean>

	<!-- 自动装配 -->
	<!-- byName查找容器中和属性名称相同的bean或beanId -->
	<bean id="student3" class="com.yfairy.demo.spring_in_action_2.Student"
		autowire="byName">
		<!-- 混合使用自动装配，可同时使用自动装配，和property设置值 -->
		<property name="classNo" value="混合使用自动装配"></property>
	</bean>

	<!-- 自动装配 -->
	<!-- byType查找类型相同的bean <bean id="student5" class="com.yfairy.demo.spring_in_action_2.Student" 
		autowire="byType"> </bean> -->

	<bean id="beanScope" class="com.yfairy.demo.spring_in_action_2.BeanScope"
		scope="prototype" factory-method="newInstance" init-method="initMethod"
		destroy-method="destroyMethod">
		<!-- scope="prototype"每次都new 一个bean,singleton返回bean的单列 -->
		<property name="name" value="bean范围"></property>
	</bean>

	<!-- abstract设置bean 为抽象的不能实例化 -->
	<bean id="parent" class="com.yfairy.demo.spring_in_action_2.Parent"
		abstract="true">
		<property name="name" value="张三"></property>
		<property name="sex" value="哈哈"></property>
	</bean>
	<!-- 通过parent设置父类实现继承 -->
	<bean id="parentc1" parent="parent"></bean>
	<bean id="parentc2" parent="parent">
		<property name="name" value="重写父类张三"></property>
	</bean>

	<!--不设置bean的class，设置 abstract="true",其他不是同父类通过parent也可共享同一个配置 -->
	<bean id="commonBean" abstract="true">
		<property name="name" value="李思"></property>
	</bean>
	<bean id="parent2" class="com.yfairy.demo.spring_in_action_2.Parent"
		parent="commonBean">
	</bean>
	<bean id="people" class="com.yfairy.demo.spring_in_action_2.People"
		parent="commonBean">
	</bean>

	<!-- 替换方法 -->
	<bean id="methodReplaceer" class="com.yfairy.demo.spring_in_action_2.MethodReplaceer">
	</bean>
	<bean id="methodReplaceDemo" class="com.yfairy.demo.spring_in_action_2.MethodReplaceDemo">
		<property name="name" value="lele"></property>
		<replaced-method name="getContent" replacer="methodReplaceer">
		</replaced-method>
	</bean>

	<!-- 注入非spring bean -->
	<!-- <bean id="user" class="com.yfairy.demo.spring_in_action_2.User" abstract="true"> 
		<property name="helloService" ref="helloService"></property> </bean> -->
	<!-- <context:spring-configured></context:spring-configured> -->
	<!-- CustomEditorConfigurer自定义属性编辑器设置bean -->
	<!-- <bean class="org.springframework.beans.factory.config.CustomEditorConfigurer"> 
		<property name="customEditors"> <map> <entry key="com.yfairy.demo.spring_in_action_2.Parent"> 
		<bean class="com.yfairy.demo.spring_in_action_2.ParentEdit"></bean> </entry> 
		</map> </property> </bean> -->
	<!-- <bean id="parentEditDemo" class="com.yfairy.demo.spring_in_action_2.ParentEditDemo"> 
		<property name="parent" value="zhangsan-哈哈"></property> </bean> -->

	<bean id="advanceBeanLifeCycle" class="com.yfairy.demo.spring_in_action_2.AdvanceBeanLifeCycle">
		<property name="name" value="李思III"></property>
	</bean>

	<bean id="beanCounter" class="com.yfairy.demo.spring_in_action_2.BeanCounter">
	</bean>

	<!-- 读取多个properties配置文件 -->
	<bean id="propertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:*.properties</value>
				<!-- file:./dbpool.properties ,相对路径 "./" 代表当前目录,"../"代表上级目录 -->
				<value>file:./conf/*.properties</value>
			</list>
		</property>
	</bean>

	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="msg"></property>
	</bean>

	<!-- ApplicationListener -->
	<bean id="myEventListener" class="com.yfairy.demo.spring_in_action_2.MyEventListener">
		<!-- <property name="helloService" ref="ghello"></property> -->
	</bean>

	<!--配置使用groovy脚本 -->
	<!-- <lang:groovy id="ghello" script-source=”classpath:groov.groovy”> </lang:groovy> -->

	<!-- 第4章：aop -->
	<!-- 配置advice -->
	<bean id="guanzongAdvice" class="com.yfairy.demo.spring_in_action_2.GuanzongAdvice"></bean>
	<!-- 配置advisor -->
	<bean id="guanzongAdvisor"
		class="org.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor">
		<property name="advice" ref="guanzongAdvice"></property>
		<property name="expression"
			value="execution(* com.yfairy.demo.spring_in_action_2.Duke.*(..) )"></property>
	</bean>
	<!-- <bean id="dukeTarget" class="com.yfairy.demo.spring_in_action_2.Duke"></bean> -->

	<!-- 配置代理工厂生成代理bean,多个代理bean可通过设置一个抽象的代理工厂，再共享工厂设置多个bean -->
	<!-- <bean id="dukeProxyFactoryBean" class="org.springframework.aop.framework.ProxyFactoryBean"> 
		<property name="target" ref="dukeTarget"></property> <property name="interceptorNames"> 
		<list> <value>guanzongAdvisor</value> </list> </property> <property name="proxyInterfaces"> 
		<list> <value>com.yfairy.demo.spring_in_action_2.IDukeService</value> </list> 
		</property> </bean> -->

	<!-- 启动aop注解自动代理 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<bean id="duke" class="com.yfairy.demo.spring_in_action_2.Duke"></bean>
	<bean id="guanzongAspect" class="com.yfairy.demo.spring_in_action_2.GuanzongAspect"></bean>

	<!-- 配置数据源连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<!-- 数据库基本信息配置 -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	<!-- 配置jdbc模板 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<bean id="studentDao" class="com.yfairy.demo.spring_in_action_2.StudentDao">
		<property name="jdbcTemplate" ref="jdbcTemplate"></property>
		<!-- 注入事务管理模板 -->
		<property name="transactionTemplate">
			<bean class="org.springframework.transaction.support.TransactionTemplate">
				<property name="transactionManager" ref="dataSourceTransactionManager" />
			</bean>
		</property>
	</bean>

	<!-- 配置mybatis -->
	<!-- 配置SqlSessionFactoryBean用于创建 SqlSessionFactory 的 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 配置mybatis sqlSessionTemplate 模板 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"></constructor-arg>
	</bean>

	<!-- 配置jdbc事务管理器 -->
	<bean id="dataSourceTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
</beans>