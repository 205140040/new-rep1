<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
     http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-4.0.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
     http://www.springframework.org/schema/cache 
     http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
     http://www.springframework.org/schema/jms
	 http://www.springframework.org/schema/jms/spring-jms.xsd
     ">

	<!-- JMS服务厂商提供的连接工厂 -->
	<bean id="activeMQConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://localhost:61616" />
	</bean>
	<!-- 缓存连接工厂 -->
	<bean id="cachingConnectionFactory"
		class="org.springframework.jms.connection.CachingConnectionFactory">
		<property name="targetConnectionFactory" ref="activeMQConnectionFactory"></property>
		<!-- Session缓存数量,CachingConnectionFactory只缓存一个session， 在它的JavaDoc中，它声明对于低并发情况下这是足够的。 -->
		<property name="sessionCacheSize" value="100" />
	</bean>
	<!--队列目的地 -->
	<bean id="defaultQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>defaultQueue</value>
		</constructor-arg>
	</bean>

	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="cachingConnectionFactory"></property>
		<!-- 默认的目的地 -->
		<property name="defaultDestination" ref="defaultQueue"></property>
		<!--模式不是发布订阅模式,即p2p模式 -->
		<property name="pubSubDomain" value="false" />
	</bean>
	<!-- 配置jms消息接收监听器 -->
	<bean id="jmslistener1"
		class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
		<constructor-arg>
			<bean class="com.timobb.demo.SpringAsyncReceive"></bean>
		</constructor-arg>
		<!-- 配置自定义方法，默认方法为handleMessage() <property name="delegate"> <bean class="com.tiantian.springintejms.listener.ConsumerListener"/> 
			</property> <property name="defaultListenerMethod" value="receiveMessage"/> -->
	</bean>

	<!-- 配置分布式jms事务管理器，可把jms事务和jdbc作为同一个事务,还需要配置tomcat支持jta ,暂不使用 <bean id="jtaTransactionManager" 
		class="org.springframework.transaction.jta.JtaTransactionManager"> </bean> -->

	<!-- 消息监听器容器,container-type="default"代表使用DefaultMessageListenerContainer -->
	<!-- 消息监听容器 -->
	<bean id="defaultMessageListenerContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="cachingConnectionFactory" />
		<property name="destination" ref="defaultQueue" />
		<property name="messageListener" ref="jmslistener1" />
		<!-- 支持jms事务,不包含jdbc事务 -->
		<property name="sessionTransacted" value="true"></property>
	</bean>
	<!-- <jms:listener-container connection-factory="cachingConnectionFactory" 
		container-type="default" > <jms:listener destination="defaultQueue" ref="jmslistener1" 
		selector="type='eat'" /> </jms:listener-container> -->
</beans>